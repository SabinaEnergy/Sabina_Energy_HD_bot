import os, re, json, requests
from flask import Flask, request, jsonify

# ====== ENV ======
BOT_TOKEN       = os.getenv("BOT_TOKEN", "").strip()    # —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
BASE_URL        = os.getenv("BASE_URL", "https://example.onrender.com").rstrip("/")
SECRET_TOKEN    = os.getenv("SECRET_TOKEN", "SabinaSecret2025")

# –ö—É–¥–∞ –≤–µ—Å—Ç–∏ "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç" (—Ç–≤–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ human-design.space —Å —Ö–µ—à-—Ä–æ—É—Ç–æ–º)
FREE_CALC_URL   = os.getenv(
    "FREE_CALC_URL",
    "https://human-design.space/dizajn-cheloveka-raschet-karty/#/?rave=7366406054640513"
)

# –ö—É–¥–∞ –≤–µ—Å—Ç–∏ "–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç" (–º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å; –æ—Å—Ç–∞–≤–∏–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–æ–π —Å—Å—ã–ª–∫–∏)
PAID_CALC_URL   = os.getenv(
    "PAID_CALC_URL",
    "https://human-design.space/dizajn-cheloveka-raschet-karty/#/?rave=7366406054640513"
)

# –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
VIDEO_URL       = os.getenv("VIDEO_URL", "https://t.me/your_channel/123")

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = Flask(__name__)

# ====== –¢–ï–ó–ò–°–´ (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–æ–¥ —Å–µ–±—è) ======
TYPE_TIPS = {
    "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä": (
        "‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: —Ç–≤–æ—è —Å–∏–ª–∞ ‚Äî –æ—Ç–∫–ª–∏–∫. –°–ª—É—à–∞–π ¬´–¥–∞/–Ω–µ—Ç¬ª —Ç–µ–ª–∞, –∞ –Ω–µ –≥–æ–ª–æ–≤—ã. "
        "–î–µ–ª–∞–π —Ç–æ, —á—Ç–æ –∑–∞–∂–∏–≥–∞–µ—Ç ‚Äî —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–¥—ë—Ç."
    ),
    "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": (
        "‚ö° –ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç + –º–æ—â–Ω—ã–π –æ—Ç–∫–ª–∏–∫. "
        "–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–ª–∞–Ω—ã –ø–æ —Ö–æ–¥—É ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    ),
    "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä": (
        "‚ö° –ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä: –∏–Ω–∏—Ü–∏–∏—Ä—É–π –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–π. –¢–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –Ω–∞—á–∞—Ç—å –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω—ã–º."
    ),
    "–ü—Ä–æ–µ–∫—Ç–æ—Ä": (
        "‚ö° –ü—Ä–æ–µ–∫—Ç–æ—Ä: –∂–¥–∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –§–æ–∫—É—Å –Ω–∞ —Å–≤–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª—é–¥—è—Ö."
    ),
    "–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä": (
        "‚ö° –†–µ—Ñ–ª–µ–∫—Ç–æ—Ä: –≤—Ä–µ–º—è ‚Äî —Ç–≤–æ–π –¥—Ä—É–≥. –ù–∞–±–ª—é–¥–∞–π —Ü–∏–∫–ª—ã, –ø—Ä–∏–Ω–∏–º–∞–π –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–µ —Å–ø–µ—à–∞."
    ),
}

PROFILE_TIPS = {
    "1/3": "üß≠ 1/3 –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å-–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä: —Å—Ç—Ä–æ–∏—à—å –æ—Å–Ω–æ–≤—É –∏ —É—á–∏—à—å—Å—è —á–µ—Ä–µ–∑ –æ–ø—ã—Ç.",
    "1/4": "üß≠ 1/4 –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å-–û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç: —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç + –ª—é–¥–∏ –∏ —Å–≤—è–∑–∏.",
    "2/4": "üß≠ 2/4 –û—Ç—à–µ–ª—å–Ω–∏–∫-–û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç: —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ª—é–¥–µ–π.",
    "2/5": "üß≠ 2/5 –û—Ç—à–µ–ª—å–Ω–∏–∫-–ï—Ä–µ—Ç–∏–∫: —Ç–∞–ª–∞–Ω—Ç + –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å, –≤–∞–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏–π.",
    "3/5": "üß≠ 3/5 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä-–ï—Ä–µ—Ç–∏–∫: –ø—Ä–æ–±—É–µ—à—å ‚Äî –ø–∞–¥–∞–µ—à—å ‚Äî –≤—Å—Ç–∞—ë—à—å –∏ –≤–µ–¥—ë—à—å –¥—Ä—É–≥–∏—Ö.",
    "3/6": "üß≠ 3/6 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä-–†–æ–ª–µ–≤–∞—è –ú–æ–¥–µ–ª—å: —Ç—Ä–∏ —ç—Ç–∞–ø–∞ –∂–∏–∑–Ω–∏, –º—É–¥—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ –æ–ø—ã—Ç.",
    "4/1": "üß≠ 4/1 –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Å–≤—è–∑–∏, –≤–∞–∂–µ–Ω —Å–≤–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.",
    "4/6": "üß≠ 4/6 –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç-–†–æ–ª–µ–≤–∞—è –ú–æ–¥–µ–ª—å: –ª—é–¥–∏ –∏ —ç—Ç–∞–ø–Ω–æ—Å—Ç—å, –∫ 30+ –≤—ã—Ö–æ–¥–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.",
    "5/1": "üß≠ 5/1 –ï—Ä–µ—Ç–∏–∫-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö, –æ–ø–æ—Ä–∞ –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.",
    "5/2": "üß≠ 5/2 –ï—Ä–µ—Ç–∏–∫-–û—Ç—à–µ–ª—å–Ω–∏–∫: —Å–ø–∞—Å–∞—Ç–µ–ª—å —Å —Ç–∞–ª–∞–Ω—Ç–æ–º, –±–µ—Ä–µ–≥–∏ —ç–Ω–µ—Ä–≥–∏—é –∏ –æ–∂–∏–¥–∞–Ω–∏—è.",
    "6/2": "üß≠ 6/2 –†–æ–ª–µ–≤–∞—è –ú–æ–¥–µ–ª—å-–û—Ç—à–µ–ª—å–Ω–∏–∫: —Ç—Ä–∏ —ç—Ç–∞–ø–∞ –∂–∏–∑–Ω–∏, —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö.",
    "6/3": "üß≠ 6/3 –†–æ–ª–µ–≤–∞—è –ú–æ–¥–µ–ª—å-–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä: –º—É–¥—Ä–æ—Å—Ç—å + –∂–∏–≤–æ–π –æ–ø—ã—Ç –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö.",
}

# ====== –ü–ê–†–°–ï–† –¢–ò–ü–ê –ò –ü–†–û–§–ò–õ–Ø ======
TYPE_ALIASES = {
    # –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
    r"\b–º–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä(—É—é—â|—É—é—â–∏–π)\s*–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\b": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b–º–≥\b": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\b": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω(—ã–π|–∞—è)\s*–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\b": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –±–∞–∑–æ–≤–æ–º—É —Ç–∏–ø—É
    r"\b–º–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä\b": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä",
    r"\b–ø—Ä–æ–µ–∫—Ç–æ—Ä\b": "–ü—Ä–æ–µ–∫—Ç–æ—Ä",
    r"\b—Ä–µ—Ñ–ª–µ–∫—Ç–æ—Ä\b": "–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä",
}

PROFILE_RE = re.compile(r"(\b[1-6])\s*[/\.]\s*([1-6]\b)")  # 3/5, 3.5, 6 / 2

def extract_type_and_profile(text: str):
    text_lc = text.lower()

    # –ø—Ä–æ—Ñ–∏–ª—å: –∏—â–µ–º –ø–µ—Ä–≤—ã–º, –æ–Ω –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª–µ–Ω
    prof = None
    m = PROFILE_RE.search(text_lc)
    if m:
        prof = f"{m.group(1)}/{m.group(2)}"

    # —Ç–∏–ø: –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –∞–ª–∏–∞—Å–∞–º
    t = None
    for pat, norm in TYPE_ALIASES.items():
        if re.search(pat, text_lc):
            t = norm
            break

    return t, prof


# ====== –¢–ï–õ–ï–ì–†–ê–ú –£–¢–ò–õ–ò–¢–´ ======
def tg_call(method, **params):
    if not BOT_TOKEN:
        return None
    try:
        return requests.post(f"{TG_API}/{method}", json=params, timeout=15)
    except requests.RequestException:
        return None

def main_keyboard():
    return {
        "inline_keyboard": [
            [ {"text": "üß© –Ø –Ω–æ–≤–∏—á–æ–∫ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏", "callback_data": "novice"} ],
            [ {"text": "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", "url": FREE_CALC_URL} ],
            [ {"text": "üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "url": PAID_CALC_URL} ],
            [ {"text": "üé• –í–∏–¥–µ–æ / –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "url": VIDEO_URL} ],
            [ {"text": "üìù –Ø –∑–Ω–∞—é —Å–≤–æ–π —Ç–∏–ø –∏ –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "i_know"} ],
        ]
    }

def novice_flow_messages():
    return [
        "‚ú® *–ß—Ç–æ —Ç–∞–∫–æ–µ Human Design?*\n–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–ø–æ—Å–æ–±–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.",
        "üó∫ *–ë–æ–¥–∏–≥—Ä–∞—Ñ* ‚Äî —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ü–µ–Ω—Ç—Ä—ã, –∫–∞–Ω–∞–ª—ã, –≤–æ—Ä–æ—Ç–∞).",
        "üß† *–¢–∏–ø* –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∏—Ä–æ–º. –ï—Å—Ç—å 5 —Ç–∏–ø–æ–≤.",
        "üß≠ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã –ø—Ä–æ–±—É–µ—à—å, —É—á–∏—à—å—Å—è, –≤–ª–∏—è–µ—à—å. –í—Å–µ–≥–æ 12 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.",
        "–ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –ù–∞–∂–º–∏ ¬´üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ¬ª.",
    ]

# ====== –†–û–£–¢–´ ======
@app.get("/")
def health():
    return "OK"

@app.get("/set-webhook")
def set_webhook():
    if not BOT_TOKEN:
        return jsonify({"ok": False, "error": "BOT_TOKEN is empty"})
    url = f"{BASE_URL}/tg/webhook"
    r = requests.get(
        f"{TG_API}/setWebhook",
        params={"url": url, "secret_token": SECRET_TOKEN},
        timeout=15
    )
    try:
        return jsonify(r.json())
    except Exception:
        return r.text, r.status_code

@app.get("/get-webhook-info")
def get_webhook_info():
    if not BOT_TOKEN:
        return jsonify({"ok": False, "error": "BOT_TOKEN is empty"})
    r = requests.get(f"{TG_API}/getWebhookInfo", timeout=15)
    try:
        return jsonify(r.json())
    except Exception:
        return r.text, r.status_code

@app.post("/tg/webhook")
def webhook():
    # –∑–∞—â–∏—Ç–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != SECRET_TOKEN:
        return "forbidden", 403

    upd = request.get_json(silent=True) or {}
    msg = upd.get("message")
    cq  = upd.get("callback_query")

    # --- –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (callback_data) ---
    if cq:
        chat_id = cq["message"]["chat"]["id"]
        data = cq.get("data")

        if data == "novice":
            for text in novice_flow_messages():
                tg_call("sendMessage", chat_id=chat_id, text=text, parse_mode="Markdown")
            return "ok"

        if data == "i_know":
            tg_call("sendMessage", chat_id=chat_id,
                    text=("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π *—Ç–∏–ø* –∏ *–ø—Ä–æ—Ñ–∏–ª—å* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                          "–ù–∞–ø—Ä–∏–º–µ—Ä: _–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5_ –∏–ª–∏ _–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1_."),
                    parse_mode="Markdown")
            return "ok"

        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –º–µ–Ω—é
        tg_call("sendMessage", chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
                reply_markup=main_keyboard())
        return "ok"

    # --- –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    if msg:
        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()

        # /start ‚Üí –º–µ–Ω—é
        if text.startswith("/start"):
            tg_call("sendMessage",
                    chat_id=chat_id,
                    text=("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Sabina Energy –ø–æ Human Design.\n\n"
                          "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ: —É–∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤—ã, —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç, "
                          "–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–º—É –ø–ª–∞—Ç–Ω–æ–º—É –æ—Ç—á—ë—Ç—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ."),
                    reply_markup=main_keyboard())
            return "ok"

        # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–∏–ø –∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        t, prof = extract_type_and_profile(text)
        if not t and not prof:
            # –Ω–µ –ø–æ–Ω—è–ª–∏ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç
            tg_call("sendMessage", chat_id=chat_id,
                    text=("–ù–µ –ø–æ–Ω—è–ª–∞ ü§î\n"
                          "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π *—Ç–∏–ø* –∏ *–ø—Ä–æ—Ñ–∏–ª—å* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                          "–ü—Ä–∏–º–µ—Ä—ã: _–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5_, _–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1_, _–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2/4_."),
                    parse_mode="Markdown",
                    reply_markup=main_keyboard())
            return "ok"

        parts = []
        if t:
            tip = TYPE_TIPS.get(t, "–¢–≤–æ–π —Ç–∏–ø ‚Äî —ç—Ç–æ –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π.")
            parts.append(f"–¢–∏–ø: *{t}*\n{tip}")
        if prof:
            tip = PROFILE_TIPS.get(prof, "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –∫–ª—é—á –∫ —Ç–≤–æ–∏–º —Ä–æ–ª—è–º –∏ —Å–ø–æ—Å–æ–±—É –æ–±—É—á–µ–Ω–∏—è.")
            parts.append(f"–ü—Ä–æ—Ñ–∏–ª—å: *{prof}*\n{tip}")

        final = "‚úÖ –í–æ—Ç —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –ø–æ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–µ:\n\n" + "\n\n".join(parts)
        tg_call("sendMessage", chat_id=chat_id, text=final, parse_mode="Markdown",
                reply_markup={
                    "inline_keyboard":[
                        [ {"text":"üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", "url": FREE_CALC_URL} ],
                        [ {"text":"üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "url": PAID_CALC_URL} ],
                        [ {"text":"üé• –í–∏–¥–µ–æ / –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "url": VIDEO_URL} ],
                    ]
                })
        return "ok"

    return "ok"


if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))
