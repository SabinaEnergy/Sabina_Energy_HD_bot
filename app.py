import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# === –õ–û–ì–ò ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ===
ASK_DATE, ASK_TIME, ASK_PLACE = range(3)

# === –°–¢–ê–†–¢ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ –±–µ—Å–ø–ª–∞—Ç–Ω–æ"],
        ["‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Human Design?"],
        ["üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"],
        ["üíú –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç"]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üå∏ –Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ Human Design.\n\n"
        "–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π –±–æ–¥–∏–≥—Ä–∞—Ñ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# === –ê–ù–ö–ï–¢–ê ===
async def free_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ú® –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º.\n\n–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 22.10.1985):")
    return ASK_DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_date"] = update.message.text
    await update.message.reply_text("‚è∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:03).\n"
                                    "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ '—É—Ç—Ä–æ', '–¥–µ–Ω—å' –∏–ª–∏ '–≤–µ—á–µ—Ä'.")
    return ASK_TIME

async def ask_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_time"] = update.message.text
    await update.message.reply_text("üåç –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî —É–∫–∞–∂–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞):")
    return ASK_PLACE

async def finish_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_place"] = update.message.text

    date = context.user_data["birth_date"]
    time = context.user_data["birth_time"]
    place = context.user_data["birth_place"]

    # üîó –°—Å—ã–ª–∫–∞ –Ω–∞ human-design.space (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫)
    url = f"https://human-design.space/#/?date={date}&time={time}&place={place}"

    await update.message.reply_text(
        f"üîÆ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –±–æ–¥–∏–≥—Ä–∞—Ñ:\n[{date}, {time}, {place}]({url})",
        parse_mode="Markdown"
    )
    await update.message.reply_text("‚ö°Ô∏è –ö–æ–≥–¥–∞ —É–≤–∏–¥–∏—à—å —Å–≤–æ–π —Ç–∏–ø –∏ –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –Ω–∞–ø–∏—à–∏ –∏—Ö —Å—é–¥–∞, –∏ —è –¥–∞–º —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚ú®")

    return ConversationHandler.END

# === –û–ü–ò–°–ê–ù–ò–Ø ===
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è Human Design ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.\n"
        "–í –Ω–µ–π –µ—Å—Ç—å 5 —Ç–∏–ø–æ–≤ –∏ 12 –ø—Ä–æ—Ñ–∏–ª–µ–π.\n\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ —Å–≤–æ–π —Ç–∏–ø –∏ –ø—Ä–æ—Ñ–∏–ª—å?\n–ñ–º–∏ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ –±–µ—Å–ø–ª–∞—Ç–Ω–æ'!"
    )

async def video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé• –í–∏–¥–µ–æ –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º: [—Å–º–æ—Ç—Ä–µ—Ç—å](https://t.me/—Ç–≤–æ—è_—Å—Å—ã–ª–∫–∞)", parse_mode="Markdown")

async def paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíú –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "[–°–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç](https://human-design.space/dizajn-cheloveka-raschet-karty/#/)",
        parse_mode="Markdown"
    )

# === –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† ===
def main():
    # üîë –í–°–¢–ê–í–¨ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ –±–µ—Å–ø–ª–∞—Ç–Ω–æ"), free_calc)],
        states={
            ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_place)],
            ASK_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_calc)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Human Design?"), about))
    app.add_handler(MessageHandler(filters.Regex("üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"), video))
    app.add_handler(MessageHandler(filters.Regex("üíú –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç"), paid))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()
