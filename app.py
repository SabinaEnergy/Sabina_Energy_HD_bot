import os, json, requests
from urllib.parse import urlencode, urlsplit, urlunsplit, parse_qs
from flask import Flask, request, send_from_directory, jsonify, redirect
from dotenv import load_dotenv
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò –û–ö–†–£–ñ–ï–ù–ò–ï ===
BOT_TOKEN         = os.getenv("BOT_TOKEN", "").strip()
BASE_URL          = os.getenv("BASE_URL", "https://sabina-energy-hd-bot.onrender.com").rstrip("/")
WEBAPP_URL        = os.getenv("WEBAPP_URL", f"{BASE_URL}/hd")
VIDEO_URL         = os.getenv("VIDEO_URL", "https://t.me/your_channel/123")
DIRECT_LINK       = os.getenv("DIRECT_LINK", "https://human-design.space")
SECRET_TOKEN      = os.getenv("SECRET_TOKEN", "SabinaSecret")

# --- BodyGraph API (–∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –≤–æ–∑—å–º—ë—à—å –∫–ª—é—á) ---
BG_API_KEY        = os.getenv("BODYGRAPH_API_KEY", "").strip()
BG_API_BASE       = os.getenv("BODYGRAPH_API_BASE", "https://api.bodygraphchart.com").rstrip("/")
# –≠—Ç–∏ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—å–º–∏ –∏–∑ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞): 
BG_CREATE_EP      = os.getenv("BG_CREATE_ENDPOINT", "/v1/charts")          # POST
BG_IMAGE_EP       = os.getenv("BG_IMAGE_ENDPOINT", "/v1/charts/{id}/image") # GET (PNG/SVG)
# -------------------------------------------------------

# –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç (–µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç)
FALLBACK_REDIRECT_BASE = os.getenv(
    "REDIRECT_BASE_URL",
    "https://human-design.space/dizajn-cheloveka-raschet-karty/#/"
)

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = Flask(__name__, static_folder="webapp", static_url_path="/hd")

def tg(method, **params):
    if not BOT_TOKEN:
        return None
    try:
        return requests.post(f"{TG_API}/{method}", json=params, timeout=15)
    except Exception:
        return None

def add_utm(url, extra: dict):
    """–ü–æ–¥–º–µ—à–∏–≤–∞–µ–º UTM –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ª—é–±–æ–π URL."""
    parts = urlsplit(url)
    qs = parse_qs(parts.query, keep_blank_values=True)

    # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ utm
    qs.setdefault("utm_source", ["telegram"])
    qs.setdefault("utm_medium", ["bot"])
    qs.setdefault("utm_campaign", ["sabina_hd_bot"])

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    for k, v in extra.items():
        if v is None or str(v).strip() == "":
            continue
        qs[k] = [str(v)]

    new_q = urlencode(qs, doseq=True, encoding="utf-8")
    return urlunsplit((parts.scheme, parts.netloc, parts.path, new_q, parts.fragment))


# ============== –°–¢–ê–¢–ò–ö–ê/–•–ï–õ–°–ß–ï–ö ==============
@app.get("/")
def health():
    return "OK"

@app.get("/privacy")
def privacy():
    return send_from_directory("static", "privacy.html")

@app.get("/hd")
def webapp_index():
    return send_from_directory("webapp", "index.html")

@app.get("/hd/<path:fname>")
def webapp_files(fname):
    return send_from_directory("webapp", fname)


# ============== TELEGRAM ==============
@app.get("/set-webhook")
def set_webhook():
    if not BOT_TOKEN:
        return jsonify({"ok": False, "error": "BOT_TOKEN is empty"})
    url = f"{BASE_URL}/tg/webhook"
    r = requests.get(
        f"{TG_API}/setWebhook",
        params={"url": url, "secret_token": SECRET_TOKEN},
        timeout=15
    )
    return jsonify(r.json())

@app.post("/tg/webhook")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != SECRET_TOKEN:
        return "forbidden", 403

    upd = request.get_json(silent=True) or {}
    msg = upd.get("message") or upd.get("edited_message") or {}
    chat_id = (msg.get("chat") or {}).get("id")
    text = msg.get("text")

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if text and text.startswith("/start"):
        kb = {
            "inline_keyboard":[
                [ { "text":"–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ", "web_app": { "url": WEBAPP_URL } } ],
                [ { "text":"–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", "url": DIRECT_LINK } ]
            ]
        }
        tg("sendMessage",
           chat_id=chat_id,
           text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫ Sabina Energy –ø–æ Human Design.\n–ù–∞–∂–º–∏ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ¬ªüëá",
           reply_markup=kb)
        return "ok"

    # –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
    web = msg.get("web_app_data")
    if web:
        try:
            payload = json.loads(web.get("data") or "{}")
        except Exception:
            payload = {"raw": web.get("data")}

        # 1) –µ—Å–ª–∏ –µ—Å—Ç—å API-–∫–ª—é—á ‚Äî –ø—Ä–æ–±—É–µ–º –≤—ã–∑—ã–≤–∞—Ç—å BodyGraph
        if BG_API_KEY:
            try:
                bg = call_bodygraph_api(payload)
                image_url = bg.get("image_url")
                report_url = bg.get("report_url") or bg.get("url") or DIRECT_LINK

                # –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –∫–Ω–æ–ø–∫–∞
                if image_url:
                    tg("sendPhoto", chat_id=chat_id, photo=image_url,
                       caption="–¢–≤–æ–π –±–æ–¥–∏–≥—Ä–∞—Ñ. –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá",
                       reply_markup={"inline_keyboard":[
                           [ {"text":"–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", "url": report_url} ]
                       ]})
                else:
                    tg("sendMessage", chat_id=chat_id,
                       text=f"–ì–æ—Ç–æ–≤–æ! –û—Ç—á—ë—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
                       reply_markup={"inline_keyboard":[
                           [ {"text":"–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç", "url": report_url} ]
                       ]})
                return "ok"
            except Exception as e:
                # –ü–∞–¥–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
                pass

        # 2) —Ä–µ–∑–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ human-design.space —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        link = build_fallback_redirect(payload)
        tg("sendMessage", chat_id=chat_id,
           text="–û—Ç–∫—Ä–æ–π —Ä–∞—Å—á—ë—Ç –ø–æ –∫–Ω–æ–ø–∫–µ:",
           reply_markup={"inline_keyboard":[
               [ {"text":"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á—ë—Ç—É", "url": link} ],
               [ {"text":"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑", "web_app":{"url": WEBAPP_URL}} ]
           ]})
    return "ok"


# ============== REST API –î–õ–Ø –í–ï–ë-–§–û–†–ú–´ ==============
@app.post("/api/compute")
def compute():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å –ø–æ–ª—è–º–∏ —Ñ–æ—Ä–º—ã. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á ‚Äî –≤—ã–∑—ã–≤–∞–µ–º BodyGraph.
       –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON { ok, report_url, image_url, fallback_url }.
    """
    data = request.get_json(silent=True) or {}
    # –ï—Å–ª–∏ API-–∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å
    if BG_API_KEY:
        try:
            res = call_bodygraph_api(data)
            return jsonify({"ok": True, **res})
        except Exception as e:
            # –º—è–≥–∫–∏–π –æ—Ç–∫–∞—Ç –≤ —Ä–µ–∑–µ—Ä–≤
            pass

    # —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —É—Ä–ª
    return jsonify({
        "ok": True,
        "report_url": build_fallback_redirect(data),
        "image_url": None,
        "fallback_url": build_fallback_redirect(data),
        "mode": "fallback"
    })


# ============== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° BODYGRAPH ==============
def call_bodygraph_api(payload: dict) -> dict:
    """
    –í–ù–ò–ú–ê–ù–ò–ï: —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤–æ–∑—å–º–∏ –∏–∑ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    (https://bodygraph.com/feature/human-design-api/ ‚Üí ‚ÄòAPI documentation‚Äô).
    –ó–¥–µ—Å—å –≤—Å—ë —Ä–∞–∑–Ω–µ—Å–µ–Ω–æ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º, —á—Ç–æ–±—ã —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∞.
    """
    headers = {
        "Authorization": f"Bearer {BG_API_KEY}",
        "Content-Type": "application/json"
    }

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    # –æ–∂–∏–¥–∞–µ–º: name, gender (male/female), date (–î–î.–ú–ú.–ì–ì–ì–ì), time (HH:MM),
    # city (—Å—Ç—Ä–æ–∫–∞), lat, lon, tz_offset (–Ω–µ–æ–±—è–∑.)
    name    = (payload.get("name") or "").strip()
    gender  = (payload.get("gender") or "").strip()   # "male" / "female"
    date    = (payload.get("date") or "").strip()     # "09.09.1990"
    time    = (payload.get("time") or "").strip()     # "15:30"
    city    = (payload.get("city") or "").strip()
    lat     = payload.get("lat")
    lon     = payload.get("lon")
    tz_off  = payload.get("tz_offset")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "+03:00"

    # –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–¥–≥–æ–Ω—è–µ—à—å –ø–æ–¥ –∏—Ö –¥–æ–∫—É):
    body = {
        "name": name or "Client",
        "gender": gender or "female",
        "birth": {
            "date": date,            # –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –ì–ì–ì–ì-–ú–ú-–î–î ‚Äî –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –∏—Ö API
            "time": time,            # HH:MM
            "city": city,
            "latitude": lat,
            "longitude": lon,
            "tz_offset": tz_off      # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        },
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ª–æ–∫–∞–ª—å/—è–∑—ã–∫, —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç.–¥. ‚Äî —Å–º. –∏—Ö –¥–æ–∫–∏
        "options": {
            "image_format": "png",
            "include_report_url": True
        }
    }

    # 1) —Å–æ–∑–¥–∞—ë–º —á–∞—Ä—Ç
    create_url = f"{BG_API_BASE}{BG_CREATE_EP}"
    r = requests.post(create_url, headers=headers, json=body, timeout=30)
    r.raise_for_status()
    j = r.json()

    # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ API –≤–µ—Ä–Ω—ë—Ç id/uuid –∏ —Å—Å—ã–ª–∫–∏
    chart_id   = j.get("id") or j.get("chart_id")
    report_url = j.get("report_url") or j.get("public_url") or j.get("url")
    image_url  = j.get("image_url")

    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ:
    if not image_url and chart_id and "{id}" in BG_IMAGE_EP:
        img_url = f"{BG_API_BASE}{BG_IMAGE_EP.replace('{id}', str(chart_id))}"
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –æ—Ç–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ä–∞–∑—É, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî URL
        img_resp = requests.get(img_url, headers=headers, timeout=30)
        if img_resp.status_code == 200 and "image" in img_resp.headers.get("Content-Type",""):
            # –∑–∞–ª–∏–≤–∞–µ–º –∫—É–¥–∞-—Ç–æ CDN –∏ –æ—Ç–¥–∞—ë–º URL (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
            pass
        else:
            try:
                image_url = img_resp.json().get("image_url")
            except Exception:
                image_url = None

    # safety fallback ‚Äî –µ—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç—á–µ—Ç
    if not report_url:
        report_url = DIRECT_LINK

    return {
        "report_url": report_url,
        "image_url": image_url,
        "chart_id": chart_id
    }


# ============== –†–ï–ó–ï–†–í–ù–´–ô –†–ï–î–ò–†–ï–ö–¢ –ù–ê HUMAN-DESIGN.SPACE ==============
def build_fallback_redirect(payload: dict) -> str:
    """
    –ú—ã –Ω–µ –∑–Ω–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É human-design.space, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–∑—É —Å—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç—É.
    –ü–æ—ç—Ç–æ–º—É –≤–µ–¥—ë–º –Ω–∞ –∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—á—ë—Ç–∞ + –ø–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ query –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ç–∞–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º—ë—Ç ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª.
    """
    params = {
        "name":   payload.get("name"),
        "gender": payload.get("gender"),
        "date":   payload.get("date"),
        "time":   payload.get("time"),
        "city":   payload.get("city"),
        "rave":   request.args.get("rave") or os.getenv("RAVE_ID") or "7366406054640513",  # —Ç–≤–æ–π —Ä–µ—Ñ
    }
    return add_utm(FALLBACK_REDIRECT_BASE, params)


# ============== –°–ï–†–í–ï–† ==============
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
