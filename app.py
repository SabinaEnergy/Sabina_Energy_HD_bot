import os, re, json, time, requests
from flask import Flask, request, jsonify

# ========== ENV ==========
BOT_TOKEN    = os.getenv("BOT_TOKEN", "").strip()          # —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
BASE_URL     = os.getenv("BASE_URL", "https://example.com").rstrip("/")
SECRET_TOKEN = os.getenv("SECRET_TOKEN", "SabinaSecret2025")

# –∫—É–¥–∞ –≤–µ—Å—Ç–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π/–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç (—Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ –∏/–∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)
FREE_CALC_URL = os.getenv(
    "FREE_CALC_URL",
    "https://human-design.space/dizajn-cheloveka-raschet-karty/#/?rave=7366406054640513"
)
PAID_CALC_URL = os.getenv(
    "PAID_CALC_URL",
    "https://human-design.space/dizajn-cheloveka-raschet-karty/#/?rave=7366406054640513"
)
VIDEO_URL    = os.getenv("VIDEO_URL", "https://t.me/your_channel/123")

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = Flask(__name__)

# ========== –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô (in-memory) ==========
# sessions[user_id] = {"step": "...", "data": {...}, "ts": unix}
sessions = {}

# ========== –¢–ï–ó–ò–°–´ (–∑–∞–≥–ª—É—à–∫–∏ ‚Äî –ø–æ—Ç–æ–º –ø–æ–¥—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã) ==========
TYPE_TIPS = {
    "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä": "‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: –∂–¥–∏ –æ—Ç–∫–ª–∏–∫–∞ —Ç–µ–ª–∞. –î–µ–ª–∞–π —Ç–æ, —á—Ç–æ –∑–∞–∂–∏–≥–∞–µ—Ç ‚Äî —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–¥—ë—Ç.",
    "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": "‚ö° –ú–ì: –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç + –æ—Ç–∫–ª–∏–∫. –ú–µ–Ω—è—Ç—å –∫—É—Ä—Å –ø–æ —Ö–æ–¥—É ‚Äî –æ–∫.",
    "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä": "‚ö° –ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä: –∏–Ω–∏—Ü–∏–∏—Ä—É–π –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–π –≤–æ–≤–ª–µ—á—ë–Ω–Ω—ã—Ö.",
    "–ü—Ä–æ–µ–∫—Ç–æ—Ä": "‚ö° –ü—Ä–æ–µ–∫—Ç–æ—Ä: –∂–¥–∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è/–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –§–æ–∫—É—Å –Ω–∞ —Å–≤–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ.",
    "–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä": "‚ö° –†–µ—Ñ–ª–µ–∫—Ç–æ—Ä: —Ä–µ—à–µ–Ω–∏—è –Ω–µ —Å–ø–µ—à–∏ ‚Äî –Ω–∞–±–ª—é–¥–∞–π —Ü–∏–∫–ª—ã (–¥–æ –ª—É–Ω–Ω–æ–≥–æ).",
}

PROFILE_TIPS = {
    "1/3": "üß≠ 1/3 –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å-–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä: —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç + –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–ø—ã—Ç–µ.",
    "1/4": "üß≠ 1/4 –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å-–û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç: –æ–ø–æ—Ä–∞ + —Å–≤—è–∑–∏/–ª—é–¥–∏.",
    "2/4": "üß≠ 2/4 –û—Ç—à–µ–ª—å–Ω–∏–∫-–û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç: —Ç–∞–ª–∞–Ω—Ç + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ª—é–¥–µ–π.",
    "2/5": "üß≠ 2/5 –û—Ç—à–µ–ª—å–Ω–∏–∫-–ï—Ä–µ—Ç–∏–∫: —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ–Ω, –±–µ—Ä–µ–≥–∏ –≥—Ä–∞–Ω–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏–π.",
    "3/5": "üß≠ 3/5 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä-–ï—Ä–µ—Ç–∏–∫: –ø—Ä–æ–±—É–π ‚Äî –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã ‚Äî –≤–µ–¥–∏.",
    "3/6": "üß≠ 3/6 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä-–†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: —Ç—Ä–∏ —ç—Ç–∞–ø–∞ –∂–∏–∑–Ω–∏ ‚Üí –º—É–¥—Ä–æ—Å—Ç—å.",
    "4/1": "üß≠ 4/1 –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å + –≤–∞–∂–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã.",
    "4/6": "üß≠ 4/6 –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç-–†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: –ª—é–¥–∏ + —ç—Ç–∞–ø–Ω–æ—Å—Ç—å –ø—É—Ç–∏.",
    "5/1": "üß≠ 5/1 –ï—Ä–µ—Ç–∏–∫-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è + –æ–ø–æ—Ä–∞ –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.",
    "5/2": "üß≠ 5/2 –ï—Ä–µ—Ç–∏–∫-–û—Ç—à–µ–ª—å–Ω–∏–∫: —Å–ø–∞—Å–∞—Ç–µ–ª—å —Å —Ç–∞–ª–∞–Ω—Ç–æ–º, –±–µ—Ä–µ–≥–∏ —ç–Ω–µ—Ä–≥–∏—é.",
    "6/2": "üß≠ 6/2 –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å-–û—Ç—à–µ–ª—å–Ω–∏–∫: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º.",
    "6/3": "üß≠ 6/3 –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å-–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä: –º—É–¥—Ä–æ—Å—Ç—å + –∂–∏–≤–æ–π –æ–ø—ã—Ç.",
}

# ========== –ü–ê–†–°–ò–ù–ì –¢–ò–ü–ê/–ü–†–û–§–ò–õ–Ø –∏–∑ —Ç–µ–∫—Å—Ç–∞ ==========
TYPE_ALIASES = {
    r"\b–º–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä(—É—é—â|—É—é—â–∏–π)\s*–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\b": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b–º–≥\b": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\b": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω(—ã–π|–∞—è)\s*–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\b": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    r"\b–º–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä\b": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä",
    r"\b–ø—Ä–æ–µ–∫—Ç–æ—Ä\b": "–ü—Ä–æ–µ–∫—Ç–æ—Ä",
    r"\b—Ä–µ—Ñ–ª–µ–∫—Ç–æ—Ä\b": "–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä",
}
PROFILE_RE = re.compile(r"(\b[1-6])\s*[/\.]\s*([1-6]\b)")

def extract_type_and_profile(text: str):
    text_lc = text.lower()
    prof = None
    m = PROFILE_RE.search(text_lc)
    if m: prof = f"{m.group(1)}/{m.group(2)}"
    t = None
    for pat, norm in TYPE_ALIASES.items():
        if re.search(pat, text_lc): t = norm; break
    return t, prof

# ========== TELEGRAM HELPERS ==========
def tg(method, **params):
    if not BOT_TOKEN: return None
    try:
        return requests.post(f"{TG_API}/{method}", json=params, timeout=15)
    except requests.RequestException:
        return None

def main_menu():
    return {
        "inline_keyboard":[
            [ {"text":"‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ (–∞–Ω–∫–µ—Ç–∞)","callback_data":"calc_start"} ],
            [ {"text":"üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç","url": PAID_CALC_URL} ],
            [ {"text":"üé• –í–∏–¥–µ–æ / –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è","url": VIDEO_URL} ],
            [ {"text":"‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Human Design?","callback_data":"about_hd"} ],
            [ {"text":"üìö –û —Ç–∏–ø–∞—Ö","callback_data":"about_types"},
              {"text":"üìñ –û –ø—Ä–æ—Ñ–∏–ª—è—Ö","callback_data":"about_profiles"} ],
            [ {"text":"üìù –Ø –∑–Ω–∞—é —Å–≤–æ–π —Ç–∏–ø/–ø—Ä–æ—Ñ–∏–ª—å","callback_data":"i_know"} ],
        ]
    }

def about_hd_messages():
    return [
        "‚ú® *Human Design* ‚Äî —Å–∏—Å—Ç–µ–º–∞ –æ —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.",
        "üó∫ *–ë–æ–¥–∏–≥—Ä–∞—Ñ* ‚Äî –∫–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–æ–≤/–∫–∞–Ω–∞–ª–æ–≤/–≤–æ—Ä–æ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏/–º–µ—Å—Ç—É.",
        "üß† *–¢–∏–ø* ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∏—Ä–æ–º. –í—Å–µ–≥–æ 5 —Ç–∏–ø–æ–≤.",
        "üß≠ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî –∫–∞–∫ —Ç—ã —É—á–∏—à—å—Å—è –∏ –≤–ª–∏—è–µ—à—å. 12 —Å–æ—á–µ—Ç–∞–Ω–∏–π.",
        "–ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –ñ–º–∏ ¬´‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ (–∞–Ω–∫–µ—Ç–∞)¬ª.",
    ]

# ========== –ê–ù–ö–ï–¢–ê (–ø—Ä–æ—Å—Ç–∞—è FSM) ==========
def start_session(uid):
    sessions[uid] = {"step": "ask_date", "data": {}, "ts": time.time()}

def cleanup_sessions(max_age_sec=3600):
    now = time.time()
    for uid in list(sessions.keys()):
        if now - sessions[uid].get("ts", now) > max_age_sec:
            sessions.pop(uid, None)

def fsm_handle(uid, text):
    s = sessions.get(uid) or {}
    step = s.get("step")
    data = s.get("data", {})
    s["ts"] = time.time()

    if step == "ask_date":
        data["birth_date"] = text.strip()
        s["step"] = "ask_time"
        s["data"] = data
        sessions[uid] = s
        return "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:03). –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ ¬´—É—Ç—Ä–æ¬ª, ¬´–¥–µ–Ω—å¬ª –∏–ª–∏ ¬´–≤–µ—á–µ—Ä¬ª."

    if step == "ask_time":
        data["birth_time"] = text.strip()
        s["step"] = "ask_place"
        s["data"] = data
        sessions[uid] = s
        return "–ì–æ—Ä–æ–¥/–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è üåç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è)."

    if step == "ask_place":
        data["birth_place"] = text.strip()
        s["step"] = "done"
        sessions[uid] = s

        # —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É (–ø–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, —Å–∞–π—Ç —Å–∞–º –Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç)
        params = {
            "date": data.get("birth_date",""),
            "time": data.get("birth_time",""),
            "place": data.get("birth_place",""),
            "utm_source": "telegram-bot",
            "utm_medium": "funnel",
        }
        # –¥–æ–±–∞–≤–∏–º –≤ HASH-—á–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ rave (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–∫–∏–Ω–≥)
        link = FREE_CALC_URL

        msg = (
            "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–ª–∏ ‚úÖ\n\n"
            "üîÆ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –±–æ–¥–∏–≥—Ä–∞—Ñ:\n"
            f"{link}\n\n"
            "–ö–æ–≥–¥–∞ —É–≤–∏–¥–∏—à—å *—Ç–∏–ø* –∏ *–ø—Ä–æ—Ñ–∏–ª—å* ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏—Ö —Å—é–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5¬ª –∏–ª–∏ ¬´–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1¬ª."
        )
        return msg

    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —Å–±—Ä–æ—Å
    start_session(uid)
    return "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: 22.10.1985)."

# ========== FLASK ROUTES ==========
@app.get("/")
def health():
    return "OK"

@app.get("/set-webhook")
def set_webhook():
    if not BOT_TOKEN:
        return jsonify({"ok": False, "error": "BOT_TOKEN is empty"})
    url = f"{BASE_URL}/tg/webhook"
    r = requests.get(f"{TG_API}/setWebhook",
                     params={"url": url, "secret_token": SECRET_TOKEN},
                     timeout=15)
    try: return jsonify(r.json())
    except Exception: return r.text, r.status_code

@app.get("/get-webhook-info")
def get_wh_info():
    if not BOT_TOKEN:
        return jsonify({"ok": False, "error": "BOT_TOKEN is empty"})
    r = requests.get(f"{TG_API}/getWebhookInfo", timeout=15)
    try: return jsonify(r.json())
    except Exception: return r.text, r.status_code

@app.post("/tg/webhook")
def tg_webhook():
    # –∑–∞—â–∏—Ç–∞ –≤–µ–±—Ö—É–∫–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != SECRET_TOKEN:
        return "forbidden", 403

    upd = request.get_json(silent=True) or {}
    msg = upd.get("message")
    cb  = upd.get("callback_query")

    # ---- callback-–∫–Ω–æ–ø–∫–∏ ----
    if cb:
        chat_id = cb["message"]["chat"]["id"]
        data = cb.get("data","")

        if data == "calc_start":
            start_session(chat_id)
            tg("sendMessage", chat_id=chat_id,
               text="–ê–Ω–∫–µ—Ç–∞ ‚úçÔ∏è\n–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: 22.10.1985).")
            return "ok"

        if data == "about_hd":
            for t in about_hd_messages():
                tg("sendMessage", chat_id=chat_id, text=t, parse_mode="Markdown")
            return "ok"

        if data == "about_types":
            tg("sendMessage", chat_id=chat_id,
               text=("5 —Ç–∏–ø–æ–≤: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –ü—Ä–æ–µ–∫—Ç–æ—Ä, "
                     "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä, –†–µ—Ñ–ª–µ–∫—Ç–æ—Ä.\n"
                     "–£–∑–Ω–∞–π —Å–≤–æ–π —Ç–∏–ø —á–µ—Ä–µ–∑ ¬´‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ (–∞–Ω–∫–µ—Ç–∞)¬ª."))
            return "ok"

        if data == "about_profiles":
            tg("sendMessage", chat_id=chat_id,
               text=("–ü—Ä–æ—Ñ–∏–ª—å ‚Äî —ç—Ç–æ 2 —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3/5, 2/4, 6/2). "
                     "–û–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è –∏ –≤–ª–∏—è–Ω–∏—è.\n"
                     "–£–∑–Ω–∞–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ ¬´‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ (–∞–Ω–∫–µ—Ç–∞)¬ª."))
            return "ok"

        if data == "i_know":
            tg("sendMessage", chat_id=chat_id,
               text=("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π *—Ç–∏–ø* –∏ *–ø—Ä–æ—Ñ–∏–ª—å* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                     "–ü—Ä–∏–º–µ—Ä—ã: _–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5_, _–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1_, _–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2/4_."),
               parse_mode="Markdown")
            return "ok"

        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        tg("sendMessage", chat_id=chat_id,
           text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=main_menu())
        return "ok"

    # ---- –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----
    if msg:
        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()

        # /start ‚Üí –º–µ–Ω—é
        if text.startswith("/start"):
            cleanup_sessions()
            tg("sendMessage", chat_id=chat_id,
               text=("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Sabina Energy –ø–æ Human Design.\n\n"
                     "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ: —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–∞–Ω–∫–µ—Ç–∞), —É–∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤—ã, "
                     "–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞—Ç–Ω–æ–º—É –æ—Ç—á—ë—Ç—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ."),
               reply_markup=main_menu())
            return "ok"

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî –≤–µ–¥—ë–º –ø–æ —à–∞–≥–∞–º
        if chat_id in sessions and sessions[chat_id].get("step") in {"ask_date","ask_time","ask_place"}:
            reply = fsm_handle(chat_id, text)
            tg("sendMessage", chat_id=chat_id, text=reply, parse_mode="Markdown")
            return "ok"

        # –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø/–ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
        t, prof = extract_type_and_profile(text)
        if not t and not prof:
            tg("sendMessage", chat_id=chat_id,
               text=("–ù–µ –ø–æ–Ω—è–ª–∞ ü§î\n"
                     "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π *—Ç–∏–ø* –∏ *–ø—Ä–æ—Ñ–∏–ª—å* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                     "–ü—Ä–∏–º–µ—Ä—ã: _–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5_, _–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1_, _–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2/4_."),
               parse_mode="Markdown",
               reply_markup=main_menu())
            return "ok"

        parts = []
        if t:
            parts.append(f"–¢–∏–ø: *{t}*\n{TYPE_TIPS.get(t,'–¢–≤–æ–π —Ç–∏–ø ‚Äî —Ç–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.')}")
        if prof:
            parts.append(f"–ü—Ä–æ—Ñ–∏–ª—å: *{prof}*\n{PROFILE_TIPS.get(prof,'–ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø—Ä–æ —Ä–æ–ª–∏ –∏ —Å–ø–æ—Å–æ–± –æ–±—É—á–µ–Ω–∏—è.')}")

        final = "‚úÖ –¢–≤–æ—ë –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:\n\n" + "\n\n".join(parts)
        tg("sendMessage", chat_id=chat_id, text=final, parse_mode="Markdown",
           reply_markup={
               "inline_keyboard":[
                   [ {"text":"üîÆ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á—ë—Ç—É","url": FREE_CALC_URL} ],
                   [ {"text":"üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç","url": PAID_CALC_URL} ],
                   [ {"text":"üé• –í–∏–¥–µ–æ / –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è","url": VIDEO_URL} ],
               ]
           })
        return "ok"

    return "ok"


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))
