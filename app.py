import os
import re
import json
import html
import requests
from urllib.parse import urlencode, urlsplit, urlunsplit, parse_qs
from flask import Flask, request, send_from_directory, jsonify, abort
from dotenv import load_dotenv

load_dotenv()

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
BOT_TOKEN        = os.getenv("BOT_TOKEN", "")
BASE_URL         = os.getenv("BASE_URL", "https://sabina-energy-hd-bot.onrender.com")
WEBAPP_URL       = os.getenv("WEBAPP_URL", f"{BASE_URL}/hd")
VIDEO_URL        = os.getenv("VIDEO_URL", "https://t.me/your_channel/123")
DIRECT_LINK      = os.getenv("DIRECT_LINK", "https://human-design.space/?rave=")
REDIRECT_BASE_URL = os.getenv("REDIRECT_BASE_URL", "https://human-design.space/dizajn-cheloveka-raschet-karty/#/")
SERVICES_URL     = os.getenv("SERVICES_URL", "")
SECRET_TOKEN     = os.getenv("SECRET_TOKEN", "SabinaSecret")

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# ====== Flask ======
app = Flask(__name__, static_folder="webapp", static_url_path="/hd")

# ====== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ Telegram ======
def tg(method, **params):
    """–í—ã–∑–æ–≤ Telegram Bot API (json)."""
    try:
        r = requests.post(f"{TG_API}/{method}", json=params, timeout=10)
        return r.json()
    except Exception as e:
        print("TG error:", e)
        return {"ok": False, "error": str(e)}

def send_msg(chat_id, text, **kw):
    return tg("sendMessage", chat_id=chat_id, text=text, parse_mode="HTML", **kw)

def send_menu(chat_id):
    kb = {
        "inline_keyboard": [
            [ {"text": "‚ú® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–¥–∏–≥—Ä–∞—Ñ (–∞–Ω–∫–µ—Ç–∞)", "callback_data": "flow_calc"} ],
            [ {"text": "üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "url": DIRECT_LINK or "https://human-design.space/"} ],
            [ {"text": "üé• –í–∏–¥–µ–æ / –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "url": VIDEO_URL} ],
            [ {"text": "‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ Human Design?", "callback_data": "about_hd"} ],
            [
                {"text": "üìö –û —Ç–∏–ø–∞—Ö", "callback_data": "about_types"},
                {"text": "üìñ –û –ø—Ä–æ—Ñ–∏–ª—è—Ö", "callback_data": "about_profiles"},
            ],
            [ {"text": "üìù –Ø –∑–Ω–∞—é —Å–≤–æ–π —Ç–∏–ø/–ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "i_know"} ],
        ]
    }
    if SERVICES_URL:
        kb["inline_keyboard"].append([{"text": "üõ† –ú–æ–∏ —É—Å–ª—É–≥–∏", "url": SERVICES_URL}])
    send_msg(chat_id, START_TEXT, reply_markup=kb)

# ====== –¢–µ–∫—Å—Ç—ã ======
START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç <b>Sabina Energy</b> –ø–æ Human Design.\n\n"
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ: —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–∞–Ω–∫–µ—Ç–∞), —É–∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤—ã, –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞—Ç–Ω–æ–º—É –æ—Ç—á—ë—Ç—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ."
)

ABOUT_HD = (
    "<b>–ß—Ç–æ —Ç–∞–∫–æ–µ Human Design</b>\n\n"
    "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ 1987 –≥–æ–¥—É (–†–∞ –£—Ä—É –•—É). –°–∏–Ω—Ç–µ–∑ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, –ò-–¶–∑–∏–Ω, –ö–∞–±–±–∞–ª—ã, —á–∞–∫—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –∏–¥–µ–π —Ñ–∏–∑–∏–∫–∏.\n"
    "‚Ä¢ –¶–µ–ª—å ‚Äî –∂–∏—Ç—å –≤ —Å–æ–≥–ª–∞—Å–∏–∏ —Å–æ —Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥–æ–π, —Å–ª–µ–¥—É—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É.\n"
    "‚Ä¢ –í –æ—Å–Ω–æ–≤–µ ‚Äî –∏–¥–µ—è ‚Äú–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–π—Ç—Ä–∏–Ω–æ‚Äù, –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∫–æ—Ç–æ—Ä–æ–π —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –±–æ–¥–∏–≥—Ä–∞—Ñ–µ.\n"
    "‚Ä¢ 9 —Ü–µ–Ω—Ç—Ä–æ–≤: –ö–æ—Ä–Ω–µ–≤–æ–π, –°–∞–∫—Ä–∞–ª—å–Ω—ã–π, –°–µ–ª–µ–∑—ë–Ω–æ—á–Ω—ã–π, –°–æ–ª–Ω. —Å–ø–ª–µ—Ç–µ–Ω–∏–µ, –°–µ—Ä–¥–µ—á–Ω—ã–π (–≠–≥–æ), –ì–æ—Ä–ª–æ–≤–æ–π, –ê–¥–∂–Ω–∞, –¢–µ–º–µ–Ω–Ω–æ–π, G-—Ü–µ–Ω—Ç—Ä.\n"
    "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è; –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ ‚Äî —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –≤–Ω–µ—à–Ω–µ–º—É –≤–ª–∏—è–Ω–∏—é."
)

ABOUT_TYPES = (
    "<b>–¢–∏–ø—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n"
    "‚Ä¢ <b>–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä</b> ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.\n"
    "‚Ä¢ <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä</b> ‚Äî —Å–æ–∑–¥–∞—ë—Ç, –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∂–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∞.\n"
    "‚Ä¢ <b>–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä</b> ‚Äî –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ + —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∂–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∞, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å.\n"
    "‚Ä¢ <b>–ü—Ä–æ–µ–∫—Ç–æ—Ä</b> ‚Äî –≤–∏–¥–∏—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∂–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
    "‚Ä¢ <b>–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä</b> ‚Äî –∑–µ—Ä–∫–∞–ª–∏—Ç —Å—Ä–µ–¥—É. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∂–¥–∞—Ç—å ~28 –¥–Ω–µ–π (—Ü–∏–∫–ª –õ—É–Ω—ã) –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
)

ABOUT_PROFILES = (
    "<b>–ü—Ä–æ—Ñ–∏–ª–∏</b> ‚Äî –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–≤—É—Ö –ª–∏–Ω–∏–π (1‚Äì6). –í—Å–µ–≥–æ 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
    "1/3, 1/4, 2/4, 2/5, 3/5, 3/6, 4/6, 4/1, 5/1, 5/2, 6/2, 6/3.\n"
    "–ö–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –æ—Å–æ–±–∞—è —Ä–æ–ª—å/–ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–± –∏ –æ—à–∏–±–æ–∫, –µ—Ä–µ—Å–∏ –∏ —Ç.–ø."
)

TYPE_SNIPPETS = {
    "–º–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä ‚Äî –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä. –í–∞–∂–Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –ø–µ—Ä–µ–¥ —à–∞–≥–∞–º–∏.",
    "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚Äî —É—Å—Ç–æ–π—á–∏–≤–∞—è –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è. –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî —Å–∞–∫—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫.",
    "–º–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": "–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –º–æ—â–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª–∏–∫, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.",
    "–ø—Ä–æ–µ–∫—Ç–æ—Ä": "–ü—Ä–æ–µ–∫—Ç–æ—Ä ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –¥—Ä—É–≥–∏—Ö. –í–∞–∂–Ω—ã –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
    "—Ä–µ—Ñ–ª–µ–∫—Ç–æ—Ä": "–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä ‚Äî –∑–µ—Ä–∫–∞–ª–∏—Ç —Å—Ä–µ–¥—É, –º–µ–Ω—è–µ—Ç—Å—è —Å –ª—É–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º. –†–µ—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ª—É–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.",
}

PROFILE_SNIPPETS = {
    "1/3": "1/3 ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å / –ú—É—á–µ–Ω–∏–∫: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –æ–ø—ã—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±—É –∏ –æ—à–∏–±–∫—É.",
    "1/4": "1/4 ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å / –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç: —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç + –≤–ª–∏—è–Ω–∏–µ —á–µ—Ä–µ–∑ –±–ª–∏–∑–∫–∏–µ —Å–≤—è–∑–∏.",
    "2/4": "2/4 ‚Äî –û—Ç—à–µ–ª—å–Ω–∏–∫ / –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç: —Ç–∞–ª–∞–Ω—Ç –≤ —Ç–∏—à–∏–Ω–µ, –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.",
    "2/5": "2/5 ‚Äî –û—Ç—à–µ–ª—å–Ω–∏–∫ / –ï—Ä–µ—Ç–∏–∫: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫ –≤–∞–º –ø—Ä–æ–µ—Ü–∏—Ä—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è.",
    "3/5": "3/5 ‚Äî –ú—É—á–µ–Ω–∏–∫ / –ï—Ä–µ—Ç–∏–∫: –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—ã—Ç, –≤—ã —É–º–µ–µ—Ç–µ —á–∏–Ω–∏—Ç—å —Å–ª–æ–º–∞–Ω–Ω–æ–µ.",
    "3/6": "3/6 ‚Äî –ú—É—á–µ–Ω–∏–∫ / –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: —ç—Ç–∞–ø—ã ‚Äî –æ–ø—ã—Ç, –æ–±–∑–æ—Ä, –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö.",
    "4/6": "4/6 ‚Äî –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç / –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: —Å–∏–ª–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –ø—Ä–∏–º–µ—Ä–æ–º.",
    "4/1": "4/1 ‚Äî –û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç / –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ + –≤–ª–∏—è–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∏.",
    "5/1": "5/1 ‚Äî –ï—Ä–µ—Ç–∏–∫ / –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑—ã, –Ω—É–∂–µ–Ω –ø—Ä–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.",
    "5/2": "5/2 ‚Äî –ï—Ä–µ—Ç–∏–∫ / –û—Ç—à–µ–ª—å–Ω–∏–∫: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è + –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –¥–∞—Ä—ã –≤ —É–µ–¥–∏–Ω–µ–Ω–∏–∏.",
    "6/2": "6/2 ‚Äî –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å / –û—Ç—à–µ–ª—å–Ω–∏–∫: —Ü–∏–∫–ª 3—Ö —Ñ–∞–∑, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ—Ä –¥—Ä—É–≥–∏–º.",
    "6/3": "6/3 ‚Äî –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å / –ú—É—á–µ–Ω–∏–∫: –¥–æ–ª–≥–∏–π –ø—É—Ç—å –æ–ø—ã—Ç–æ–≤ –∫ –∑—Ä–µ–ª–æ–π –º–æ–¥–µ–ª–∏.",
}

# ====== –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ RAM) ======
STATE = {}  # chat_id -> {"step": "...", "data": {...}}

def start_flow(chat_id):
    STATE[chat_id] = {"step": "ask_date", "data": {}}
    send_msg(chat_id, "–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: <b>22.10.1985</b>).")

def handle_flow(chat_id, text):
    st = STATE.get(chat_id, {"step": None, "data": {}})
    step = st.get("step")

    if step == "ask_date":
        if not re.match(r"^\d{1,2}\.\d{1,2}\.\d{4}$", text.strip()):
            return send_msg(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–¥.–º–º.–≥–≥–≥–≥</b> üôè")
        st["data"]["date"] = text.strip()
        st["step"] = "ask_time"
        send_msg(chat_id, "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <b>15:03</b>). –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ ¬´—É—Ç—Ä–æ¬ª, ¬´–¥–µ–Ω—å¬ª –∏–ª–∏ ¬´–≤–µ—á–µ—Ä¬ª.")
        return

    if step == "ask_time":
        st["data"]["time"] = text.strip()
        st["step"] = "ask_city"
        send_msg(chat_id, "–ì–æ—Ä–æ–¥/–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è üåç (–Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ú–æ—Å–∫–≤–∞</b>).")
        return

    if step == "ask_city":
        st["data"]["city"] = text.strip()
        data = st["data"]
        STATE.pop(chat_id, None)

        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å—á—ë—Ç ‚Äî –≤–µ–¥—ë–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã,
        # –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∂–º—ë—Ç ¬´–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É¬ª.
        calc_url = REDIRECT_BASE_URL

        msg = (
            "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–ª–∏ ‚úÖ\n\n"
            "üîÆ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –±–æ–¥–∏–≥—Ä–∞—Ñ:\n"
            f"{calc_url}\n\n"
            "–ö–æ–≥–¥–∞ —É–≤–∏–¥–∏—à—å <b>—Ç–∏–ø</b> –∏ <b>–ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏—Ö —Å—é–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5¬ª –∏–ª–∏ ¬´–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1¬ª.\n\n"
            "–ê –ø–æ–∫–∞ ‚Äî –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–∞—Å—á—ë—Ç:\n"
        )
        kb = {
            "inline_keyboard": [
                [ {"text": "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á—ë—Ç—É", "url": calc_url} ],
                [ {"text": "üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "url": DIRECT_LINK or "https://human-design.space/"} ],
            ]
        }
        send_msg(chat_id, msg, reply_markup=kb)
        return

    # –ï—Å–ª–∏ —à–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    send_msg(chat_id, "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üòä")
    start_flow(chat_id)

# ====== –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∏–ø–∞/–ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ ======
TYPE_KEYS = [
    ("–º–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–º–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"),
    ("–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"),
    ("–º–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä", "–º–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä"),
    ("–ø—Ä–æ–µ–∫—Ç–æ—Ä", "–ø—Ä–æ–µ–∫—Ç–æ—Ä"),
    ("—Ä–µ—Ñ–ª–µ–∫—Ç–æ—Ä", "—Ä–µ—Ñ–ª–µ–∫—Ç–æ—Ä"),
]

PROFILE_RE = re.compile(r"(\d)\s*[./]\s*(\d)")

def mini_reading_from_text(text):
    low = text.lower()
    found_type = None
    for key, norm in TYPE_KEYS:
        if key in low:
            found_type = norm
            break
    m = PROFILE_RE.search(low)
    prof = None
    if m:
        prof = f"{m.group(1)}/{m.group(2)}"

    parts = []
    if found_type:
        parts.append(f"<b>–¢–∏–ø:</b> {found_type.capitalize()}\n{TYPE_SNIPPETS.get(found_type,'')}")
    if prof and prof in PROFILE_SNIPPETS:
        parts.append(f"\n<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {prof}\n{PROFILE_SNIPPETS[prof]}")
    if not parts:
        return None
    return "\n".join(parts)

# ====== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ (–µ—Å–ª–∏ —Ä–µ—à–∏—à—å –¥–æ–±–∞–≤–ª—è—Ç—å UTM –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª) ======
FIXED_UTM = {"utm_source":"telegram","utm_medium":"bot","utm_campaign":"sabina_hd_bot"}
def add_utm(url, extra=None):
    extra = extra or {}
    p = urlsplit(url)
    qs = parse_qs(p.query, keep_blank_values=True)
    for k,v in FIXED_UTM.items():
        qs.setdefault(k, [v])
    for k,v in extra.items():
        if v is None: 
            continue
        qs[k] = [str(v)]
    new_q = urlencode(qs, doseq=True)
    return urlunsplit((p.scheme, p.netloc, p.path, new_q, p.fragment))

# ====== –†–æ—É—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ ======
@app.get("/")
def health():
    return "OK"

@app.get("/hd")
def hd_index():
    # –æ—Ç–¥–∞—ë–º index.html –∏–∑ –ø–∞–ø–∫–∏ webapp
    return send_from_directory("webapp", "index.html")

@app.get("/hd/<path:fname>")
def hd_static(fname):
    return send_from_directory("webapp", fname)

@app.get("/privacy")
def privacy():
    return send_from_directory("static", "privacy.html")

@app.get("/set-webhook")
def set_webhook():
    url = f"{BASE_URL}/tg/webhook"
    r = requests.get(
        f"{TG_API}/setWebhook",
        params={"url": url, "secret_token": SECRET_TOKEN},
        timeout=10
    )
    return jsonify(r.json())

@app.get("/check-webhook")
def check_webhook():
    r = requests.get(f"{TG_API}/getWebhookInfo", timeout=10)
    return jsonify(r.json())

@app.post("/tg/webhook")
def webhook():
    # –∑–∞—â–∏—Ç–∞ —Å–µ–∫—Ä–µ—Ç–æ–º
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != SECRET_TOKEN:
        abort(403)

    upd = request.get_json(silent=True) or {}
    msg = upd.get("message") or upd.get("edited_message")
    cb  = upd.get("callback_query")

    # Callback-–∫–Ω–æ–ø–∫–∏
    if cb:
        chat_id = cb["message"]["chat"]["id"]
        data = cb.get("data") or ""
        # –ó–∞–∫—Ä–æ–µ–º "—á–∞—Å–∏–∫–∏"
        tg("answerCallbackQuery", callback_query_id=cb["id"])
        if data == "flow_calc":
            start_flow(chat_id)
        elif data == "about_hd":
            send_msg(chat_id, ABOUT_HD)
        elif data == "about_types":
            send_msg(chat_id, ABOUT_TYPES)
        elif data == "about_profiles":
            send_msg(chat_id, ABOUT_PROFILES)
        elif data == "i_know":
            send_msg(chat_id, "–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π <b>—Ç–∏–ø</b> –∏ <b>–ø—Ä–æ—Ñ–∏–ª—å</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3/5¬ª –∏–ª–∏ ¬´–ü—Ä–æ–µ–∫—Ç–æ—Ä 4.1¬ª.")
        else:
            send_menu(chat_id)
        return "ok"

    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if msg:
        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()

        if text.startswith("/start"):
            send_menu(chat_id)
            return "ok"

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî –≤–µ–¥—ë–º –ø–æ —à–∞–≥–∞–º
        if chat_id in STATE and STATE[chat_id].get("step"):
            handle_flow(chat_id, text)
            return "ok"

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø/–ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞—Ç—å –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä
        reading = mini_reading_from_text(text)
        if reading:
            send_msg(chat_id, reading)
            kb = {
                "inline_keyboard":[
                    [ {"text":"üéì –ë–æ–ª—å—à–µ –æ–± –æ—Å–Ω–æ–≤–∞—Ö", "callback_data":"about_hd"} ],
                    [ {"text":"üíé –ü–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "url": DIRECT_LINK or "https://human-design.space/"} ],
                ]
            }
            send_msg(chat_id, "–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–∞–ª—å—à–µ:", reply_markup=kb)
            return "ok"

        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
        send_msg(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá")
        send_menu(chat_id)
        return "ok"

    return "ok"

# ====== –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ======
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
